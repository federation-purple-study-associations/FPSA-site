/**
 * FPSA API
 * FPSA API documentation
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: info@fpsa.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { LoginDTO } from "../model/loginDTO";
import { User } from "../model/user";
import { UserActivateDTO } from "../model/userActivateDTO";
import { UserNewDTO } from "../model/userNewDTO";
import { UserSummaryDTO } from "../model/userSummaryDTO";
import { UserUpdateDTO } from "../model/userUpdateDTO";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class UserService {
    private basePath: string = 'http://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * activate
     * This call can be used to activate an account using a confirmation token
     * @param userActivateDTO 
     
     */
    public activate(userActivateDTO: UserActivateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public activate(userActivateDTO: UserActivateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activate(userActivateDTO: UserActivateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userActivateDTO === null || userActivateDTO === undefined){
            throw new Error('Required parameter userActivateDTO was null or undefined when calling activate.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/user/activate`, userActivateDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * getMe
     * This call can be used to get yourself
     
     */
    public getMe(observe?: 'body', headers?: Headers): Observable<User>;
    public getMe(observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public getMe(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/user/me`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * login
     * This call can be used to gain access to the resources of FPSA, if you have the scopes for it
     * @param loginDTO 
     
     */
    public login(loginDTO: LoginDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public login(loginDTO: LoginDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public login(loginDTO: LoginDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (loginDTO === null || loginDTO === undefined){
            throw new Error('Required parameter loginDTO was null or undefined when calling login.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/user/login`, loginDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * updateMe
     * This call can be used to update your own settings
     * @param user 
     
     */
    public updateMe(user: User, observe?: 'body', headers?: Headers): Observable<any>;
    public updateMe(user: User, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public updateMe(user: User, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (user === null || user === undefined){
            throw new Error('Required parameter user was null or undefined when calling updateMe.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/user/me`, user , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * create
     * This call can be used to create a new user
     * @param userNewDTO 
     
     */
    public userCreate(userNewDTO: UserNewDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public userCreate(userNewDTO: UserNewDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public userCreate(userNewDTO: UserNewDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userNewDTO === null || userNewDTO === undefined){
            throw new Error('Required parameter userNewDTO was null or undefined when calling userCreate.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/user`, userNewDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * delete
     * This call can be used to delete a user
     * @param id 
     
     */
    public userDelete(id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public userDelete(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public userDelete(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling userDelete.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/user/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * getAll
     * This call can be used to get all of the users in the FPSA database
     
     */
    public userGetAll(observe?: 'body', headers?: Headers): Observable<Array<UserSummaryDTO>>;
    public userGetAll(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<UserSummaryDTO>>>;
    public userGetAll(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<UserSummaryDTO>>> = this.httpClient.get(`${this.basePath}/user`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Array<UserSummaryDTO>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * getOne
     * This call can be used to get one of the users in the FPSA database
     * @param id 
     
     */
    public userGetOne(id: number, observe?: 'body', headers?: Headers): Observable<User>;
    public userGetOne(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public userGetOne(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling userGetOne.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/user/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * update
     * This call can be used to update a user
     * @param id 
     * @param userUpdateDTO 
     
     */
    public userUpdate(id: number, userUpdateDTO: UserUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public userUpdate(id: number, userUpdateDTO: UserUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public userUpdate(id: number, userUpdateDTO: UserUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling userUpdate.');
        }

        if (userUpdateDTO === null || userUpdateDTO === undefined){
            throw new Error('Required parameter userUpdateDTO was null or undefined when calling userUpdate.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/user/${encodeURIComponent(String(id))}`, userUpdateDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
