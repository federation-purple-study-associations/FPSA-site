/**
 * FPSA API
 * FPSA API documentation
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: info@fpsa.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ActivityPlan } from "../model/activityPlan";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class AdministrationService {
    private basePath: string = 'http://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * create
     * This call can be used to save a new activity plan
     * @param start 
     * @param end 
     * @param document 
     
     */
    public activityPlanCreate(start: string, end: string, document?: Blob, observe?: 'body', headers?: Headers): Observable<any>;
    public activityPlanCreate(start: string, end: string, document?: Blob, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activityPlanCreate(start: string, end: string, document?: Blob, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (start === null || start === undefined){
            throw new Error('Required parameter start was null or undefined when calling activityPlanCreate.');
        }

        if (end === null || end === undefined){
            throw new Error('Required parameter end was null or undefined when calling activityPlanCreate.');
        }

        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (start !== undefined) {
            formData.append('start', <any>start);
        }
        if (end !== undefined) {
            formData.append('end', <any>end);
        }
        if (document !== undefined) {
            formData.append('document', <any>document);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/administration/activityplan`, formData, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * delete
     * This call can be used to delete the activity plan
     * @param id 
     
     */
    public activityPlanDelete(id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public activityPlanDelete(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activityPlanDelete(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling activityPlanDelete.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/administration/activityplan/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * getAll
     * This call can be used to get all of the activity plans. Based on your account you will get all of your activity plan (if you have roleId 2), or you will get all of the activity plans in the db (if you have roleId 1)
     * @param skip 
     * @param size 
     
     */
    public activityPlanGetAll(skip?: number, size?: number, observe?: 'body', headers?: Headers): Observable<Array<ActivityPlan>>;
    public activityPlanGetAll(skip?: number, size?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ActivityPlan>>>;
    public activityPlanGetAll(skip?: number, size?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (skip !== undefined) {
            queryParameters.push("skip="+encodeURIComponent(String(skip)));
        }
        if (size !== undefined) {
            queryParameters.push("size="+encodeURIComponent(String(size)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ActivityPlan>>> = this.httpClient.get(`${this.basePath}/administration/activityplan?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Array<ActivityPlan>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * getDocument
     * This call can be used to get the PDF of the activity plan
     * @param id 
     
     */
    public activityPlanGetDocument(id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public activityPlanGetDocument(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activityPlanGetDocument(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling activityPlanGetDocument.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/administration/activityplan/${encodeURIComponent(String(id))}/document`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * update
     * This call can be used to update the activity plan
     * @param id 
     * @param start 
     * @param end 
     * @param document 
     
     */
    public activityPlanUpdate(id: number, start: string, end: string, document?: Blob, observe?: 'body', headers?: Headers): Observable<any>;
    public activityPlanUpdate(id: number, start: string, end: string, document?: Blob, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activityPlanUpdate(id: number, start: string, end: string, document?: Blob, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling activityPlanUpdate.');
        }

        if (start === null || start === undefined){
            throw new Error('Required parameter start was null or undefined when calling activityPlanUpdate.');
        }

        if (end === null || end === undefined){
            throw new Error('Required parameter end was null or undefined when calling activityPlanUpdate.');
        }

        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (start !== undefined) {
            formData.append('start', <any>start);
        }
        if (end !== undefined) {
            formData.append('end', <any>end);
        }
        if (document !== undefined) {
            formData.append('document', <any>document);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/administration/activityplan/${encodeURIComponent(String(id))}`, formData, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
